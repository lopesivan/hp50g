@ array to function
\->func
\<<
X PEVAL EXPAND
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ [1 -11 44 -76 48]
@ 2
@ 3
@ briot\->
briot\->
\<<
  \-> P, X0, degree
  \<<
    {} 'cofs' STO
    P \->func
    X0
    1 degree
	@ "I" is the local variable
    FOR I  
      HORNER
      cofs
      +
      'cofs' STO
	@ Repeat...
    NEXT    
    {1} cofs +
    {cofs} PURGE
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->briot
\<<
  DUP2
  \-> P, X0
  \<<
    1 P AXL SIZE 1 -
    FOR I
      P
      X0
      I
      briot\->
      ROT
      func\-> AXL
      1 I
      START
        0
      NEXT
      I \->LIST
      +
      SWAP DROP
      SWAP DROP
    NEXT

    P AXL SIZE 1 - \->jLrmatrix
    STO\GS
    "ruff"
    \GSDAT
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
CPOL
\<< \-> M TETHA
  \<< CYLIN DEG 'M*COS(TETHA)+M*SIN(TETHA)*i' EVAL
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
CXYZ
\<< \-> a b
  \<< DEG RECT 'a+b*i' EVAL
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
CCIS
\<< \-> a
  \<< a \pi 180. / * i * EXP SINCOS
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
conf
\<< 
HOME main

-3. usetf
-22. setf
-27. setf
-34. setf
-55. setf
-56. setf
-68. setf
-72. setf
-73. setf
-74. setf
-74. usetf
-80. setf
-81. setf
-82. setf
-90. setf
-95. usetf
-97. setf
-98. setf
-105. usetf
-111. setf
-116. setf
-117. setf
-119. setf
-120. setf
-128. setf
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
coord
\<< 
44.2 KEYEVAL 
11.1 KEYEVAL 
33. KEYEVAL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
derivadafx
\<< 
X \.d
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->egyptfrac
\<<
  0 SWAP
  WHILE DUP FXND NIP 1 >
  REPEAT DUP INV FXND IDIV2 DUP
     IF 0 \=!
     THEN SIGN
     END
     + INV ROT OVER + UNROT - EVAL
  END DROP
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
func\->
\<< { } SWAP
  DO RCLVX DIV2 ROT + SWAP
  UNTIL { 0. 0. } OVER POS
  END DROP AXL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ Descrição:
@ entrada é o numero de linhas da matriz
@ exemplo de entrada: 7 -2 -3 -2 12 -4 2
@
@   [[7 -2 -3]
@    [-2 12 -4]]
@    2
@
inMatrref
\<< 
DUP 1. + 2. \->LIST \->ARRY '\GSDAT' STO \GSDAT RREF
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Descrição:
@ Encontra a matriz X
@ A.X = B
@   X = A^-1 . B
@
@ as entradas são duas matrizes e suas dimensoes
@ exemplo de entrada: 7 -2 -2 12 2 2 -3 -4 2 1
@
@  A = [[ 7 -2  ]
@       [ -2 12 ]]
@      2x2
@
@  B = [[ -3 ]
@       [ -4 ]]
@      2x1
@
@
inMatSol
\<<
  2 \->LIST \->ARRY B STO
  2 \->LIST \->ARRY A STO
  A INV B *
  {A B} PURGE
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
integralfx
\<< 0. X 3. ROLL X \.S
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ @ ab
@ Yf Xf Zf
@ Yi Xi Zi
@ 6 \->LIST
@
@ @ f
@ X 2 ^ Y +
@
@ @dx
@ Z X  Y
@ 3 \->LIST
@ \->nInt
@

@
@ @ ab
@ Yf Xf
@ Yi Xi
@ 4 \->LIST
@
@ @ f
@ X 2 ^ Y +
@
@ @dx
@ X Y
@ 2 \->LIST
@ \->nInt
@

@ @ ab
@ 3 2 4
@ 0 0 1
@ @ f
@ X 2 ^ Y + Z +
@ X Y Z
@ \->IIInt

\->nInt
\<< "usage: {Xi Xf}, f, {X Y Z}" \-> u
  \<< \-> ab f dx
	\<<
	  IF dx SIZE 2. * ab SIZE =
	  THEN u DOERR
	  END ab AXL 2. ab SIZE 2. / \->rdmmatrix f 1. dx SIZE 1. -
	  FOR I SWAP dx SIZE I - 1. + COL- AXL OBJ\-> DROP SWAP 4. ROLL dx I GET
\.S
	  NEXT SWAP OBJ\-> DROP SWAP ROT dx dx SIZE GET \.S
	\>>
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->IInt
\<< 1. 4.
  START 7. ROLL
  NEXT 4. \->LIST UNROT 2. \->LIST ROT SWAP \->nInt
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->IIInt
\<< 1. 6.
  START 10. ROLL
  NEXT 6. \->LIST 5. ROLLD 3. \->LIST \->nInt
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->cm
\<< 1. 4.
  START 7. ROLL
  NEXT 4. \->LIST UNROT 2. \->LIST ROT SWAP 3. DUPN 3. DUPN SWAP X * SWAP \->nInt
4. ROLLD \->nInt DUP UNROT / EVAL 5. ROLLD 4. ROLLD SWAP Y * SWAP \->nInt SWAP DUP
4. ROLLD / EVAL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IVAN
\<< PUSH -70. SF "IVAN LOPES" 0. \->GROB "CPF   :083.492.327-06" 0.
\->GROB GROBADD "ID    :11.642.424-3" 0. \->GROB GROBADD "UFF ID:212.038104" 0.
\->GROB GROBADD "TE    :943889703/02" 0. \->GROB GROBADD "TEL   :965890739" 0.
\->GROB GROBADD "  zona:003" 0. \->GROB GROBADD " secao:0219" 0. \->GROB GROBADD
SCROLL POP
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
LoadCST
\<< 22.2 KEYEVAL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Descrição:
@ entrada é o numero de linhas da matriz
@ exemplo de entrada: 7 -2 -3 -2 12 -4 2
@
\->matrix
\<< 2. \->LIST \->ARRY
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
matrix\->
\<< OBJ\-> OBJ\-> DROP
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ redimensiona uma matriz
@ uso: ARRAY X Y \->rdmmatrix
@
\->rdmmatrix
\<< 2. \->LIST RDM
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ gera matriz com diagonal selecionada no array
@ uso: ARRAY X Y diagmatrix\->
@
@ 1 2 3 4 5 5 \->ARRY 2 2 diagmatrix\->
@
diagmatrix\->
\<< 2. \->LIST DIAG\->
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ X Y Z 3 \->LIST VANDERMONDE
@
\->vander
\<< \->LIST VANDERMONDE
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ matriz randomica
\->rndmatrix
\<< 2. \->LIST RANM
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@
@ extrai uma matriz,como se fosse um corte retangular
@ uso: A X0 Y0 X Y \->submatrix
@
\->submatrix
\<< 2. \->LIST UNROT 2. \->LIST SWAP SUB
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@
@ ediciona um corte retangular em uma matriz
@ uso: M MATRIZ_CORTE X0 Y0  \->replacematrix
@
@ A B 2 2 \->replacematrix
@
\->replacematrix
\<< 2. \->LIST SWAP REPL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->get
\<< 2. \->LIST GET
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->conmatrix
\<< UNROT 2. \->LIST SWAP CON
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->put
\<< UNROT 2. \->LIST SWAP PUT
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->geti
\<< 2. \->LIST GETI
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
\->puti
\<< UNROT 2. \->LIST SWAP PUTI
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@
@ junta listar em colunas
@ L1 L2 L3 3 \->jlcmatrix
@
@   1 2  3   3 \->LIST
@   4 5  6   3 \->LIST
@   7 8  9   3 \->LIST
@   10 11 12 3 \->LIST
@   4 \->jlcmatrix
@
\->jLcmatrix
\<< DUP \-> n
  \<< 1. SWAP
	FOR J OBJ\-> \->ARRY
	  IF J n <
	  THEN J 1. + ROLL
	  END
	NEXT
	IF n 1. >
	THEN 1. n 1. -
	  FOR J J 1. + ROLL
	  NEXT
	END n COL\->
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ junta listar em linhas
@ L1 L2 L3 3 \->jLrmatrix
@
@   1 2  3   3 \->LIST
@   4 5  6   3 \->LIST
@   7 8  9   3 \->LIST
@   10 11 12 3 \->LIST
@   4 \->jlrmatrix
@
\->jLrmatrix
\<< DUP \-> n
  \<< 1. SWAP
	FOR J OBJ\-> \->ARRY
	  IF J n <
	  THEN J 1. + ROLL
	  END
	NEXT
	IF n 1. >
	THEN 1. n 1. -
	  FOR J J 1. + ROLL
	  NEXT
	END n ROW\->
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
S\->C
\<< \-> a b
  \<< 'a*COS(b)+a*SIN(b)*i' EVAL
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
setf
\<< \-> x
  \<<
	IF x FC?C
	THEN x SF
	END
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
showformula
\<< \-> message
  \<< PUSH -70. SF "Show Formula" "Show Formula" 0. \->GROB
message 0. \->GROB GROBADD "" 0. \->GROB GROBADD EQ 0. \->GROB GROBADD SCROLL POP
  \>> EQ
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
S\->N
\<< "'" SWAP + OBJ\->
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
N\->S
\<< \->STR DUP
  IF "'" POS 1. ==
  THEN DUP SIZE 1. - 2. SWAP SUB
  END
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
toFloat
\<< -105. setf -3. setf -17. usetf
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
toInteger
\<< -105. usetf -3. usetf -17. setf
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
D\<-\->R
\<< -18. CF -17. FS? \-> X
  \<<
	IF 'X'
	THEN DEG
	ELSE RAD
	END
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
R\<-\->C
\<<
  IF -103. FS?
  THEN -103. usetf
  ELSE -103. setf
  END
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
XY\<-\->P
\<< -15. CF -16. FS? \-> X
  \<<
	IF 'X'
	THEN RECT
	ELSE CYLIN
	END
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
usetf
\<< \-> x
  \<<
	IF x FC?
	THEN 0.
	ELSE x CF
	END
  \>>
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ oprações com vetores linha
@
@ [1 2 3 4]
@   [2 2 2 4]
@   vector÷
@   vector^
@   vector*
@   vector.
@
vectorDivide
\<< AXL SWAP AXL SWAP / AXL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
vectorExp
\<< AXL SWAP AXL SWAP ^ AXL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
vectorMultiply
\<< HADAMARD
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
vector\GS
\<< AXL \GSLIST EVAL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
vector.
\<< SWAP TRAN * TRACE EVAL
\>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Xn
\<< \-> str N
  \<< 1. N
	FOR I str I + OBJ\->
	NEXT
  \>>
\>>

